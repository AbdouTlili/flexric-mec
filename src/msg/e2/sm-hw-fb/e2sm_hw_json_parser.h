#ifndef E2SM_HW_JSON_PARSER_H
#define E2SM_HW_JSON_PARSER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#include "flatcc/flatcc_prologue.h"

static const char *hw_TriggerNature_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *hw_EventTriggerDefinitionFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_EventTriggerUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int hw_EventTriggerUnion_json_union_accept_type(uint8_t type);
static const char *hw_EventTriggerUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *hw_EventTrigger_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_RanParameterTest_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *hw_RanParameterItem_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_ActionDefinitionFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_ActionDefinitionUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int hw_ActionDefinitionUnion_json_union_accept_type(uint8_t type);
static const char *hw_ActionDefinitionUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *hw_ActionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_IndicationHeaderFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_IndicationHeaderUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int hw_IndicationHeaderUnion_json_union_accept_type(uint8_t type);
static const char *hw_IndicationHeaderUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *hw_IndicationHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_IndicationMessageFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_IndicationMessageUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int hw_IndicationMessageUnion_json_union_accept_type(uint8_t type);
static const char *hw_IndicationMessageUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *hw_IndicationMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_ControlHeaderFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_ControlHeaderUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int hw_ControlHeaderUnion_json_union_accept_type(uint8_t type);
static const char *hw_ControlHeaderUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *hw_ControlHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_ControlMessageFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *hw_ControlMessageUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int hw_ControlMessageUnion_json_union_accept_type(uint8_t type);
static const char *hw_ControlMessageUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *hw_ControlMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *e2sm_hw_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *e2sm_hw_local_hw_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *e2sm_hw_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *hw_TriggerNature_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x4f6e4368616e6765) { /* "OnChange" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
        if (buf != mark) {
            *value = UINT64_C(1), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "OnChange" */
        if ((w & 0xffffff0000000000) == 0x4e6f770000000000) { /* "Now" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "Now" */
            return unmatched;
        } /* "Now" */
    } /* "OnChange" */
    return buf;
}

static const char *hw_EventTriggerDefinitionFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x747269676765724e) { /* descend "triggerN" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffff000000) == 0x6174757265000000) { /* "ature" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            hw_TriggerNature_parse_json_enum,
                            e2sm_hw_local_hw_json_parser_enum,
                            e2sm_hw_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_uint8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ature" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ature" */
        } else { /* descend "triggerN" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "triggerN" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_EventTriggerDefinitionFormat1_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_EventTriggerDefinitionFormat1_parse_json_table);
}

static const char *hw_EventTriggerUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* eventDefF1 */
        buf = hw_EventTriggerDefinitionFormat1_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int hw_EventTriggerUnion_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* eventDefF1 */
    default: return 0;
    }
}

static const char *hw_EventTriggerUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            goto pfguard1;
        }
    } else { /* "NONE" */
        goto pfguard1;
    } /* "NONE" */
    goto endpfguard1;
pfguard1:
    if (w == 0x6576656e74446566) { /* descend "eventDef" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffff000000000000) == 0x4631000000000000) { /* "F1" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "F1" */
            return unmatched;
        } /* "F1" */
    } else { /* descend "eventDef" */
        return unmatched;
    } /* descend "eventDef" */
endpfguard1:
    (void)0;
    return buf;
}

static const char *hw_EventTrigger_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x747269675f747970) { /* descend "trig_typ" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                if (mark != buf) {
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            hw_EventTriggerUnion_parse_json_enum,
                            e2sm_hw_local_hw_json_parser_enum,
                            e2sm_hw_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, hw_EventTriggerUnion_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "e" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "e" */
        } else { /* descend "trig_typ" */
            if ((w & 0xffffffff00000000) == 0x7472696700000000) { /* "trig" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, hw_EventTriggerUnion_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "trig" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "trig" */
        } /* descend "trig_typ" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_EventTrigger_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_EventTrigger_parse_json_table);
}

static const char *hw_RanParameterTest_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x6772656174657254) { /* branch "greaterT" */
        if ((w & 0xffffffffff000000) == 0x657175616c000000) { /* "equal" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "equal" */
            if (w == 0x636f6e7461696e73) { /* "contains" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(3), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "contains" */
                return unmatched;
            } /* "contains" */
        } /* "equal" */
    } else { /* branch "greaterT" */
        if (w < 0x6c6573735468616e) { /* branch "lessThan" */
            if (w == 0x6772656174657254) { /* descend "greaterT" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x68616e0000000000) { /* "han" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(1), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "han" */
                    return unmatched;
                } /* "han" */
            } else { /* descend "greaterT" */
                return unmatched;
            } /* descend "greaterT" */
        } else { /* branch "lessThan" */
            if ((w & 0xffffffffffffff00) == 0x70726573656e7400) { /* "present" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(4), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "present" */
                if (w == 0x6c6573735468616e) { /* "lessThan" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(2), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "lessThan" */
                    return unmatched;
                } /* "lessThan" */
            } /* "present" */
        } /* branch "lessThan" */
    } /* branch "greaterT" */
    return buf;
}

static const char *hw_RanParameterItem_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 4)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6e616d6500000000) { /* branch "name" */
            if ((w & 0xffff000000000000) == 0x6964000000000000) { /* "id" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            e2sm_hw_local_hw_json_parser_enum,
                            e2sm_hw_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_uint32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "id" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "id" */
        } else { /* branch "name" */
            if (w < 0x7465737400000000) { /* branch "test" */
                if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "name" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "name" */
            } else { /* branch "test" */
                if ((w & 0xffffffffff000000) == 0x76616c7565000000) { /* "value" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "value" */
                    if ((w & 0xffffffff00000000) == 0x7465737400000000) { /* "test" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            uint8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    hw_RanParameterTest_parse_json_enum,
                                    e2sm_hw_local_hw_json_parser_enum,
                                    e2sm_hw_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 1, 1))) goto failed;
                                flatbuffers_uint8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "test" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "test" */
                } /* "value" */
            } /* branch "test" */
        } /* branch "name" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_RanParameterItem_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_RanParameterItem_parse_json_table);
}

static const char *hw_ActionDefinitionFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x72616e506172616d) { /* descend "ranParam" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x657465724c697374) { /* "eterList" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                if (mark != buf) {
                    if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        buf = hw_RanParameterItem_parse_json_table(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    ref = flatcc_builder_end_offset_vector(ctx->ctx);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "eterList" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "eterList" */
        } else { /* descend "ranParam" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "ranParam" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_ActionDefinitionFormat1_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_ActionDefinitionFormat1_parse_json_table);
}

static const char *hw_ActionDefinitionUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* actionDefF1 */
        buf = hw_ActionDefinitionFormat1_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int hw_ActionDefinitionUnion_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* actionDefF1 */
    default: return 0;
    }
}

static const char *hw_ActionDefinitionUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            goto pfguard1;
        }
    } else { /* "NONE" */
        goto pfguard1;
    } /* "NONE" */
    goto endpfguard1;
pfguard1:
    if (w == 0x616374696f6e4465) { /* descend "actionDe" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffff0000000000) == 0x6646310000000000) { /* "fF1" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "fF1" */
            return unmatched;
        } /* "fF1" */
    } else { /* descend "actionDe" */
        return unmatched;
    } /* descend "actionDe" */
endpfguard1:
    (void)0;
    return buf;
}

static const char *hw_ActionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6465665f74797065) { /* "def_type" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
            if (mark != buf) {
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        hw_ActionDefinitionUnion_parse_json_enum,
                        e2sm_hw_local_hw_json_parser_enum,
                        e2sm_hw_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, hw_ActionDefinitionUnion_parse_json_union);
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "def_type" */
            if ((w & 0xffffff0000000000) == 0x6465660000000000) { /* "def" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, hw_ActionDefinitionUnion_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "def" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "def" */
        } /* "def_type" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_ActionDefinition_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_ActionDefinition_parse_json_table);
}

static const char *hw_IndicationHeaderFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffff000000) == 0x706172616d000000) { /* "param" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
            if (mark != buf) {
                uint32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        e2sm_hw_local_hw_json_parser_enum,
                        e2sm_hw_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_uint32_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "param" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "param" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_IndicationHeaderFormat1_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_IndicationHeaderFormat1_parse_json_table);
}

static const char *hw_IndicationHeaderUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* indHeaderF1 */
        buf = hw_IndicationHeaderFormat1_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int hw_IndicationHeaderUnion_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* indHeaderF1 */
    default: return 0;
    }
}

static const char *hw_IndicationHeaderUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            goto pfguard1;
        }
    } else { /* "NONE" */
        goto pfguard1;
    } /* "NONE" */
    goto endpfguard1;
pfguard1:
    if (w == 0x696e644865616465) { /* descend "indHeade" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffff0000000000) == 0x7246310000000000) { /* "rF1" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "rF1" */
            return unmatched;
        } /* "rF1" */
    } else { /* descend "indHeade" */
        return unmatched;
    } /* descend "indHeade" */
endpfguard1:
    (void)0;
    return buf;
}

static const char *hw_IndicationHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6864725f74797065) { /* "hdr_type" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
            if (mark != buf) {
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        hw_IndicationHeaderUnion_parse_json_enum,
                        e2sm_hw_local_hw_json_parser_enum,
                        e2sm_hw_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, hw_IndicationHeaderUnion_parse_json_union);
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "hdr_type" */
            if ((w & 0xffffff0000000000) == 0x6864720000000000) { /* "hdr" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, hw_IndicationHeaderUnion_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "hdr" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "hdr" */
        } /* "hdr_type" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_IndicationHeader_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_IndicationHeader_parse_json_table);
}

static const char *hw_IndicationMessageFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffff000000) == 0x706172616d000000) { /* "param" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
            if (mark != buf) {
                if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                while (more) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            e2sm_hw_local_hw_json_parser_enum,
                            e2sm_hw_global_json_parser_enum, 0 };
                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_uint8_write_to_pe(pval, val);
                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                }
                ref = flatcc_builder_end_vector(ctx->ctx);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "param" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "param" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_IndicationMessageFormat1_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_IndicationMessageFormat1_parse_json_table);
}

static const char *hw_IndicationMessageUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* indMessageF1 */
        buf = hw_IndicationMessageFormat1_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int hw_IndicationMessageUnion_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* indMessageF1 */
    default: return 0;
    }
}

static const char *hw_IndicationMessageUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            goto pfguard1;
        }
    } else { /* "NONE" */
        goto pfguard1;
    } /* "NONE" */
    goto endpfguard1;
pfguard1:
    if (w == 0x696e644d65737361) { /* descend "indMessa" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6765463100000000) { /* "geF1" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "geF1" */
            return unmatched;
        } /* "geF1" */
    } else { /* descend "indMessa" */
        return unmatched;
    } /* descend "indMessa" */
endpfguard1:
    (void)0;
    return buf;
}

static const char *hw_IndicationMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6d73675f74797065) { /* "msg_type" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
            if (mark != buf) {
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        hw_IndicationMessageUnion_parse_json_enum,
                        e2sm_hw_local_hw_json_parser_enum,
                        e2sm_hw_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, hw_IndicationMessageUnion_parse_json_union);
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "msg_type" */
            if ((w & 0xffffff0000000000) == 0x6d73670000000000) { /* "msg" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, hw_IndicationMessageUnion_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "msg" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "msg" */
        } /* "msg_type" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_IndicationMessage_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_IndicationMessage_parse_json_table);
}

static const char *hw_ControlHeaderFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffff000000) == 0x706172616d000000) { /* "param" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
            if (mark != buf) {
                uint32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        e2sm_hw_local_hw_json_parser_enum,
                        e2sm_hw_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_uint32_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "param" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "param" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_ControlHeaderFormat1_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_ControlHeaderFormat1_parse_json_table);
}

static const char *hw_ControlHeaderUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* ctrlHeaderF1 */
        buf = hw_ControlHeaderFormat1_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int hw_ControlHeaderUnion_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* ctrlHeaderF1 */
    default: return 0;
    }
}

static const char *hw_ControlHeaderUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            goto pfguard1;
        }
    } else { /* "NONE" */
        goto pfguard1;
    } /* "NONE" */
    goto endpfguard1;
pfguard1:
    if (w == 0x6374726c48656164) { /* descend "ctrlHead" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6572463100000000) { /* "erF1" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "erF1" */
            return unmatched;
        } /* "erF1" */
    } else { /* descend "ctrlHead" */
        return unmatched;
    } /* descend "ctrlHead" */
endpfguard1:
    (void)0;
    return buf;
}

static const char *hw_ControlHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6864725f74797065) { /* "hdr_type" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
            if (mark != buf) {
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        hw_ControlHeaderUnion_parse_json_enum,
                        e2sm_hw_local_hw_json_parser_enum,
                        e2sm_hw_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, hw_ControlHeaderUnion_parse_json_union);
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "hdr_type" */
            if ((w & 0xffffff0000000000) == 0x6864720000000000) { /* "hdr" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, hw_ControlHeaderUnion_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "hdr" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "hdr" */
        } /* "hdr_type" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_ControlHeader_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_ControlHeader_parse_json_table);
}

static const char *hw_ControlMessageFormat1_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffff000000) == 0x706172616d000000) { /* "param" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
            if (mark != buf) {
                if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                while (more) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            e2sm_hw_local_hw_json_parser_enum,
                            e2sm_hw_global_json_parser_enum, 0 };
                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_uint8_write_to_pe(pval, val);
                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                }
                ref = flatcc_builder_end_vector(ctx->ctx);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "param" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "param" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_ControlMessageFormat1_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_ControlMessageFormat1_parse_json_table);
}

static const char *hw_ControlMessageUnion_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* ctrlMessageF1 */
        buf = hw_ControlMessageFormat1_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int hw_ControlMessageUnion_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* ctrlMessageF1 */
    default: return 0;
    }
}

static const char *hw_ControlMessageUnion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            goto pfguard1;
        }
    } else { /* "NONE" */
        goto pfguard1;
    } /* "NONE" */
    goto endpfguard1;
pfguard1:
    if (w == 0x6374726c4d657373) { /* descend "ctrlMess" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffff000000) == 0x6167654631000000) { /* "ageF1" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "ageF1" */
            return unmatched;
        } /* "ageF1" */
    } else { /* descend "ctrlMess" */
        return unmatched;
    } /* descend "ctrlMess" */
endpfguard1:
    (void)0;
    return buf;
}

static const char *hw_ControlMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6d73675f74797065) { /* "msg_type" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
            if (mark != buf) {
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        hw_ControlMessageUnion_parse_json_enum,
                        e2sm_hw_local_hw_json_parser_enum,
                        e2sm_hw_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, hw_ControlMessageUnion_parse_json_union);
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "msg_type" */
            if ((w & 0xffffff0000000000) == 0x6d73670000000000) { /* "msg" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, hw_ControlMessageUnion_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "msg" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "msg" */
        } /* "msg_type" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int hw_ControlMessage_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, hw_ControlMessage_parse_json_table);
}

static const char *e2sm_hw_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *e2sm_hw_local_hw_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x4576656e74547269) { /* branch "EventTri" */
        if (w < 0x436f6e74726f6c48) { /* branch "ControlH" */
            if (w == 0x416374696f6e4465) { /* descend "ActionDe" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x66696e6974696f6e) { /* descend "finition" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x556e696f6e000000) { /* "Union" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                        if (buf != mark) {
                            buf = hw_ActionDefinitionUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "Union" */
                        return unmatched;
                    } /* "Union" */
                } else { /* descend "finition" */
                    return unmatched;
                } /* descend "finition" */
            } else { /* descend "ActionDe" */
                return unmatched;
            } /* descend "ActionDe" */
        } else { /* branch "ControlH" */
            if (w == 0x436f6e74726f6c48) { /* descend "ControlH" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x6561646572556e69) { /* descend "eaderUni" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffff000000000000) == 0x6f6e000000000000) { /* "on" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                        if (buf != mark) {
                            buf = hw_ControlHeaderUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "on" */
                        return unmatched;
                    } /* "on" */
                } else { /* descend "eaderUni" */
                    return unmatched;
                } /* descend "eaderUni" */
            } else { /* descend "ControlH" */
                if (w == 0x436f6e74726f6c4d) { /* descend "ControlM" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x657373616765556e) { /* descend "essageUn" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffff0000000000) == 0x696f6e0000000000) { /* "ion" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                            if (buf != mark) {
                                buf = hw_ControlMessageUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "ion" */
                            return unmatched;
                        } /* "ion" */
                    } else { /* descend "essageUn" */
                        return unmatched;
                    } /* descend "essageUn" */
                } else { /* descend "ControlM" */
                    return unmatched;
                } /* descend "ControlM" */
            } /* descend "ControlH" */
        } /* branch "ControlH" */
    } else { /* branch "EventTri" */
        if (w < 0x496e646963617469) { /* branch "Indicati" */
            if (w == 0x4576656e74547269) { /* descend "EventTri" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x67676572556e696f) { /* descend "ggerUnio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                        if (buf != mark) {
                            buf = hw_EventTriggerUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "n" */
                        return unmatched;
                    } /* "n" */
                } else { /* descend "ggerUnio" */
                    return unmatched;
                } /* descend "ggerUnio" */
            } else { /* descend "EventTri" */
                return unmatched;
            } /* descend "EventTri" */
        } else { /* branch "Indicati" */
            if (w == 0x496e646963617469) { /* descend "Indicati" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x6f6e486561646572) { /* descend "onHeader" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x556e696f6e000000) { /* "Union" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                        if (buf != mark) {
                            buf = hw_IndicationHeaderUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "Union" */
                        return unmatched;
                    } /* "Union" */
                } else { /* descend "onHeader" */
                    if (w == 0x6f6e4d6573736167) { /* descend "onMessag" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffffff0000) == 0x65556e696f6e0000) { /* "eUnion" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                            if (buf != mark) {
                                buf = hw_IndicationMessageUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "eUnion" */
                            return unmatched;
                        } /* "eUnion" */
                    } else { /* descend "onMessag" */
                        return unmatched;
                    } /* descend "onMessag" */
                } /* descend "onHeader" */
            } else { /* descend "Indicati" */
                if (w == 0x52616e506172616d) { /* descend "RanParam" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6574657254657374) { /* "eterTest" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                        if (buf != mark) {
                            buf = hw_RanParameterTest_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "eterTest" */
                        return unmatched;
                    } /* "eterTest" */
                } else { /* descend "RanParam" */
                    if (w == 0x547269676765724e) { /* descend "TriggerN" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffff000000) == 0x6174757265000000) { /* "ature" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                            if (buf != mark) {
                                buf = hw_TriggerNature_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "ature" */
                            return unmatched;
                        } /* "ature" */
                    } else { /* descend "TriggerN" */
                        return unmatched;
                    } /* descend "TriggerN" */
                } /* descend "RanParam" */
            } /* descend "Indicati" */
        } /* branch "Indicati" */
    } /* branch "EventTri" */
    return buf;
}

static const char *e2sm_hw_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x68772e4576656e74) { /* branch "hw.Event" */
        if (w < 0x68772e436f6e7472) { /* branch "hw.Contr" */
            if (w == 0x68772e416374696f) { /* descend "hw.Actio" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x6e446566696e6974) { /* descend "nDefinit" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x696f6e556e696f6e) { /* "ionUnion" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                        if (buf != mark) {
                            buf = hw_ActionDefinitionUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "ionUnion" */
                        return unmatched;
                    } /* "ionUnion" */
                } else { /* descend "nDefinit" */
                    return unmatched;
                } /* descend "nDefinit" */
            } else { /* descend "hw.Actio" */
                return unmatched;
            } /* descend "hw.Actio" */
        } else { /* branch "hw.Contr" */
            if (w == 0x68772e436f6e7472) { /* descend "hw.Contr" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x6f6c486561646572) { /* descend "olHeader" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x556e696f6e000000) { /* "Union" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                        if (buf != mark) {
                            buf = hw_ControlHeaderUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "Union" */
                        return unmatched;
                    } /* "Union" */
                } else { /* descend "olHeader" */
                    if (w == 0x6f6c4d6573736167) { /* descend "olMessag" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffffff0000) == 0x65556e696f6e0000) { /* "eUnion" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                            if (buf != mark) {
                                buf = hw_ControlMessageUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "eUnion" */
                            return unmatched;
                        } /* "eUnion" */
                    } else { /* descend "olMessag" */
                        return unmatched;
                    } /* descend "olMessag" */
                } /* descend "olHeader" */
            } else { /* descend "hw.Contr" */
                return unmatched;
            } /* descend "hw.Contr" */
        } /* branch "hw.Contr" */
    } else { /* branch "hw.Event" */
        if (w < 0x68772e496e646963) { /* branch "hw.Indic" */
            if (w == 0x68772e4576656e74) { /* descend "hw.Event" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5472696767657255) { /* descend "TriggerU" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffff00000000) == 0x6e696f6e00000000) { /* "nion" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 4);
                        if (buf != mark) {
                            buf = hw_EventTriggerUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "nion" */
                        return unmatched;
                    } /* "nion" */
                } else { /* descend "TriggerU" */
                    return unmatched;
                } /* descend "TriggerU" */
            } else { /* descend "hw.Event" */
                return unmatched;
            } /* descend "hw.Event" */
        } else { /* branch "hw.Indic" */
            if (w == 0x68772e496e646963) { /* descend "hw.Indic" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x6174696f6e486561) { /* descend "ationHea" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x646572556e696f6e) { /* "derUnion" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                        if (buf != mark) {
                            buf = hw_IndicationHeaderUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "derUnion" */
                        return unmatched;
                    } /* "derUnion" */
                } else { /* descend "ationHea" */
                    if (w == 0x6174696f6e4d6573) { /* descend "ationMes" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x73616765556e696f) { /* descend "sageUnio" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                                if (buf != mark) {
                                    buf = hw_IndicationMessageUnion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "n" */
                                return unmatched;
                            } /* "n" */
                        } else { /* descend "sageUnio" */
                            return unmatched;
                        } /* descend "sageUnio" */
                    } else { /* descend "ationMes" */
                        return unmatched;
                    } /* descend "ationMes" */
                } /* descend "ationHea" */
            } else { /* descend "hw.Indic" */
                if (w == 0x68772e52616e5061) { /* descend "hw.RanPa" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x72616d6574657254) { /* descend "rameterT" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffff0000000000) == 0x6573740000000000) { /* "est" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                            if (buf != mark) {
                                buf = hw_RanParameterTest_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "est" */
                            return unmatched;
                        } /* "est" */
                    } else { /* descend "rameterT" */
                        return unmatched;
                    } /* descend "rameterT" */
                } else { /* descend "hw.RanPa" */
                    if (w == 0x68772e5472696767) { /* descend "hw.Trigg" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x65724e6174757265) { /* "erNature" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                            if (buf != mark) {
                                buf = hw_TriggerNature_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "erNature" */
                            return unmatched;
                        } /* "erNature" */
                    } else { /* descend "hw.Trigg" */
                        return unmatched;
                    } /* descend "hw.Trigg" */
                } /* descend "hw.RanPa" */
            } /* descend "hw.Indic" */
        } /* branch "hw.Indic" */
    } /* branch "hw.Event" */
    return buf;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* E2SM_HW_JSON_PARSER_H */
