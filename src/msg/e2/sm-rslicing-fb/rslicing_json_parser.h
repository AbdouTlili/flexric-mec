#ifndef RSLICING_JSON_PARSER_H
#define RSLICING_JSON_PARSER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#include "flatcc/flatcc_prologue.h"

static const char *mac_rslicing_SliceAlgorithm_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *mac_rslicing_StaticSlice_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_NvsRate_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_NvsCapacity_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_NvsSliceConfig_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int mac_rslicing_NvsSliceConfig_json_union_accept_type(uint8_t type);
static const char *mac_rslicing_NvsSliceConfig_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *mac_rslicing_NvsSlice_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_Scn19OnDemand_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_Scn19SliceConfig_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int mac_rslicing_Scn19SliceConfig_json_union_accept_type(uint8_t type);
static const char *mac_rslicing_Scn19SliceConfig_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *mac_rslicing_Scn19Slice_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_EdfSlice_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_SliceParams_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int mac_rslicing_SliceParams_json_union_accept_type(uint8_t type);
static const char *mac_rslicing_SliceParams_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *mac_rslicing_Slice_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_UlDlSliceConfig_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_SliceConfig_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_UeSliceAssoc_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_UeSliceConfig_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_DelSliceConfig_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_ReportOccasion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *mac_rslicing_EventTrigger_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_IndicationHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_IndicationMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_ControlHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_AddModSliceCommand_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_DelSliceCommand_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_UeSliceAssocCommand_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_ControlCommand_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int mac_rslicing_ControlCommand_json_union_accept_type(uint8_t type);
static const char *mac_rslicing_ControlCommand_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *mac_rslicing_ControlMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_ControlOutcome_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_CallProcessId_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_SupportedAlgorithm_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_rslicing_RanFunctionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rslicing_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *rslicing_local_mac_rslicing_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *rslicing_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *mac_rslicing_SliceAlgorithm_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x4e6f6e6500000000) { /* branch "None" */
        if ((w & 0xffffff0000000000) == 0x4e56530000000000) { /* "NVS" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
            if (buf != mark) {
                *value = UINT64_C(2), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "NVS" */
            if ((w & 0xffffff0000000000) == 0x4544460000000000) { /* "EDF" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(4), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "EDF" */
                return unmatched;
            } /* "EDF" */
        } /* "NVS" */
    } else { /* branch "None" */
        if (w < 0x53434e3139000000) { /* branch "SCN19" */
            if ((w & 0xffffffff00000000) == 0x4e6f6e6500000000) { /* "None" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(0), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "None" */
                return unmatched;
            } /* "None" */
        } else { /* branch "SCN19" */
            if ((w & 0xffffffffffff0000) == 0x5374617469630000) { /* "Static" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "Static" */
                if ((w & 0xffffffffff000000) == 0x53434e3139000000) { /* "SCN19" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(3), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "SCN19" */
                    return unmatched;
                } /* "SCN19" */
            } /* "Static" */
        } /* branch "SCN19" */
    } /* branch "None" */
    return buf;
}

static const char *mac_rslicing_StaticSlice_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffff0000) == 0x706f734c6f770000) { /* "posLow" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
            if (mark != buf) {
                uint32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        rslicing_local_mac_rslicing_json_parser_enum,
                        rslicing_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_uint32_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "posLow" */
            if ((w & 0xffffffffffffff00) == 0x706f734869676800) { /* "posHigh" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                        flatbuffers_uint32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "posHigh" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "posHigh" */
        } /* "posLow" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_StaticSlice_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_StaticSlice_parse_json_table);
}

static const char *mac_rslicing_NvsRate_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6d62707352656665) { /* descend "mbpsRefe" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffff000000) == 0x72656e6365000000) { /* "rence" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    float val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                        flatbuffers_float_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "rence" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "rence" */
        } else { /* descend "mbpsRefe" */
            if (w == 0x6d62707352657175) { /* descend "mbpsRequ" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffff00000000) == 0x6972656400000000) { /* "ired" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        float val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                rslicing_local_mac_rslicing_json_parser_enum,
                                rslicing_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                            flatbuffers_float_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "ired" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "ired" */
            } else { /* descend "mbpsRequ" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "mbpsRequ" */
        } /* descend "mbpsRefe" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_NvsRate_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_NvsRate_parse_json_table);
}

static const char *mac_rslicing_NvsCapacity_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x7063745265736572) { /* descend "pctReser" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x7665640000000000) { /* "ved" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    float val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_float_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ved" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ved" */
        } else { /* descend "pctReser" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "pctReser" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_NvsCapacity_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_NvsCapacity_parse_json_table);
}

static const char *mac_rslicing_NvsSliceConfig_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* rate */
        buf = mac_rslicing_NvsRate_parse_json_table(ctx, buf, end, result);
        break;
    case 2: /* capacity */
        buf = mac_rslicing_NvsCapacity_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int mac_rslicing_NvsSliceConfig_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* rate */
    case 2: return 1; /* capacity */
    default: return 0;
    }
}

static const char *mac_rslicing_NvsSliceConfig_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x6361706163697479) { /* branch "capacity" */
        if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "NONE" */
            return unmatched;
        } /* "NONE" */
    } else { /* branch "capacity" */
        if ((w & 0xffffffff00000000) == 0x7261746500000000) { /* "rate" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "rate" */
            if (w == 0x6361706163697479) { /* "capacity" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(2), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "capacity" */
                return unmatched;
            } /* "capacity" */
        } /* "rate" */
    } /* branch "capacity" */
    return buf;
}

static const char *mac_rslicing_NvsSlice_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x636f6e6669675f74) { /* descend "config_t" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x7970650000000000) { /* "ype" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            mac_rslicing_NvsSliceConfig_parse_json_enum,
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, mac_rslicing_NvsSliceConfig_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ype" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ype" */
        } else { /* descend "config_t" */
            if ((w & 0xffffffffffff0000) == 0x636f6e6669670000) { /* "config" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, mac_rslicing_NvsSliceConfig_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "config" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "config" */
        } /* descend "config_t" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_NvsSlice_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_NvsSlice_parse_json_table);
}

static const char *mac_rslicing_Scn19OnDemand_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x7063745265736572) { /* branch "pctReser" */
            if (w == 0x6c6f6744656c7461) { /* "logDelta" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                if (mark != buf) {
                    float val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                        flatbuffers_float_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "logDelta" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "logDelta" */
        } else { /* branch "pctReser" */
            if (w == 0x7063745265736572) { /* descend "pctReser" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x7665640000000000) { /* "ved" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        float val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                rslicing_local_mac_rslicing_json_parser_enum,
                                rslicing_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                            flatbuffers_float_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "ved" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "ved" */
            } else { /* descend "pctReser" */
                if ((w & 0xffffff0000000000) == 0x7461750000000000) { /* "tau" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        uint32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                rslicing_local_mac_rslicing_json_parser_enum,
                                rslicing_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_uint32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "tau" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "tau" */
            } /* descend "pctReser" */
        } /* branch "pctReser" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_Scn19OnDemand_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_Scn19OnDemand_parse_json_table);
}

static const char *mac_rslicing_Scn19SliceConfig_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* dynamic */
        buf = mac_rslicing_NvsRate_parse_json_table(ctx, buf, end, result);
        break;
    case 2: /* fixed */
        buf = mac_rslicing_StaticSlice_parse_json_table(ctx, buf, end, result);
        break;
    case 3: /* ondemand */
        buf = mac_rslicing_Scn19OnDemand_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int mac_rslicing_Scn19SliceConfig_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* dynamic */
    case 2: return 1; /* fixed */
    case 3: return 1; /* ondemand */
    default: return 0;
    }
}

static const char *mac_rslicing_Scn19SliceConfig_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x64796e616d696300) { /* branch "dynamic" */
        if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "NONE" */
            return unmatched;
        } /* "NONE" */
    } else { /* branch "dynamic" */
        if (w < 0x6669786564000000) { /* branch "fixed" */
            if ((w & 0xffffffffffffff00) == 0x64796e616d696300) { /* "dynamic" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "dynamic" */
                return unmatched;
            } /* "dynamic" */
        } else { /* branch "fixed" */
            if (w == 0x6f6e64656d616e64) { /* "ondemand" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(3), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "ondemand" */
                if ((w & 0xffffffffff000000) == 0x6669786564000000) { /* "fixed" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(2), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "fixed" */
                    return unmatched;
                } /* "fixed" */
            } /* "ondemand" */
        } /* branch "fixed" */
    } /* branch "dynamic" */
    return buf;
}

static const char *mac_rslicing_Scn19Slice_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x636f6e6669675f74) { /* descend "config_t" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x7970650000000000) { /* "ype" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            mac_rslicing_Scn19SliceConfig_parse_json_enum,
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, mac_rslicing_Scn19SliceConfig_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ype" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ype" */
        } else { /* descend "config_t" */
            if ((w & 0xffffffffffff0000) == 0x636f6e6669670000) { /* "config" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, mac_rslicing_Scn19SliceConfig_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "config" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "config" */
        } /* descend "config_t" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_Scn19Slice_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_Scn19Slice_parse_json_table);
}

static const char *mac_rslicing_EdfSlice_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 4)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x67756172616e7465) { /* branch "guarante" */
            if (w == 0x646561646c696e65) { /* "deadline" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_uint32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "deadline" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "deadline" */
        } else { /* branch "guarante" */
            if (w < 0x6d61785265706c65) { /* branch "maxReple" */
                if (w == 0x67756172616e7465) { /* descend "guarante" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffffff0000) == 0x6564507262730000) { /* "edPrbs" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                        if (mark != buf) {
                            uint32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    rslicing_local_mac_rslicing_json_parser_enum,
                                    rslicing_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                                flatbuffers_uint32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "edPrbs" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "edPrbs" */
                } else { /* descend "guarante" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "guarante" */
            } else { /* branch "maxReple" */
                if (w == 0x6d61785265706c65) { /* descend "maxReple" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffff00000000) == 0x6e69736800000000) { /* "nish" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            uint32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    rslicing_local_mac_rslicing_json_parser_enum,
                                    rslicing_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                flatbuffers_uint32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "nish" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "nish" */
                } else { /* descend "maxReple" */
                    if (w == 0x6f76657272696465) { /* "override" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                uint32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        rslicing_local_mac_rslicing_json_parser_enum,
                                        rslicing_global_json_parser_enum, 0 };
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_uint32_write_to_pe(pval, val);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "override" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "override" */
                } /* descend "maxReple" */
            } /* branch "maxReple" */
        } /* branch "guarante" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_EdfSlice_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_EdfSlice_parse_json_table);
}

static const char *mac_rslicing_SliceParams_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* static */
        buf = mac_rslicing_StaticSlice_parse_json_table(ctx, buf, end, result);
        break;
    case 2: /* nvs */
        buf = mac_rslicing_NvsSlice_parse_json_table(ctx, buf, end, result);
        break;
    case 3: /* scn19 */
        buf = mac_rslicing_Scn19Slice_parse_json_table(ctx, buf, end, result);
        break;
    case 4: /* edf */
        buf = mac_rslicing_EdfSlice_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int mac_rslicing_SliceParams_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* static */
    case 2: return 1; /* nvs */
    case 3: return 1; /* scn19 */
    case 4: return 1; /* edf */
    default: return 0;
    }
}

static const char *mac_rslicing_SliceParams_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x6e76730000000000) { /* branch "nvs" */
        if ((w & 0xffffff0000000000) == 0x6564660000000000) { /* "edf" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
            if (buf != mark) {
                *value = UINT64_C(4), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "edf" */
            if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(0), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "NONE" */
                return unmatched;
            } /* "NONE" */
        } /* "edf" */
    } else { /* branch "nvs" */
        if (w < 0x73636e3139000000) { /* branch "scn19" */
            if ((w & 0xffffff0000000000) == 0x6e76730000000000) { /* "nvs" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(2), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "nvs" */
                return unmatched;
            } /* "nvs" */
        } else { /* branch "scn19" */
            if ((w & 0xffffffffffff0000) == 0x7374617469630000) { /* "static" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "static" */
                if ((w & 0xffffffffff000000) == 0x73636e3139000000) { /* "scn19" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(3), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "scn19" */
                    return unmatched;
                } /* "scn19" */
            } /* "static" */
        } /* branch "scn19" */
    } /* branch "nvs" */
    return buf;
}

static const char *mac_rslicing_Slice_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 5)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x706172616d730000) { /* branch "params" */
            if ((w & 0xffffffffff000000) == 0x6c6162656c000000) { /* "label" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "label" */
                if ((w & 0xffff000000000000) == 0x6964000000000000) { /* "id" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                    if (mark != buf) {
                        uint32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                rslicing_local_mac_rslicing_json_parser_enum,
                                rslicing_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                            flatbuffers_uint32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "id" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "id" */
            } /* "label" */
        } else { /* branch "params" */
            if (w == 0x706172616d735f74) { /* descend "params_t" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x7970650000000000) { /* "ype" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                mac_rslicing_SliceParams_parse_json_enum,
                                rslicing_local_mac_rslicing_json_parser_enum,
                                rslicing_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 4, h_unions, symbolic_parsers, mac_rslicing_SliceParams_parse_json_union);
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "ype" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "ype" */
            } else { /* descend "params_t" */
                if ((w & 0xffffffffffff0000) == 0x706172616d730000) { /* "params" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                    if (mark != buf) {
                        buf = flatcc_json_parser_union(ctx, buf, end, 0, 4, h_unions, mac_rslicing_SliceParams_parse_json_union);
                    } else {
                        goto pfguard1;
                    }
                } else { /* "params" */
                    goto pfguard1;
                } /* "params" */
                goto endpfguard1;
pfguard1:
                if (w == 0x7363686564756c65) { /* descend "schedule" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x7200000000000000) { /* "r" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "r" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "r" */
                } else { /* descend "schedule" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "schedule" */
endpfguard1:
                (void)0;
            } /* descend "params_t" */
        } /* branch "params" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_Slice_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_Slice_parse_json_table);
}

static const char *mac_rslicing_UlDlSliceConfig_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x7363686564756c65) { /* branch "schedule" */
            if (w == 0x616c676f72697468) { /* descend "algorith" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x6d00000000000000) { /* "m" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        uint8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                mac_rslicing_SliceAlgorithm_parse_json_enum,
                                rslicing_local_mac_rslicing_json_parser_enum,
                                rslicing_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                            flatbuffers_uint8_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "m" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "m" */
            } else { /* descend "algorith" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "algorith" */
        } else { /* branch "schedule" */
            if (w == 0x7363686564756c65) { /* descend "schedule" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x7200000000000000) { /* "r" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "r" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "r" */
            } else { /* descend "schedule" */
                if ((w & 0xffffffffffff0000) == 0x736c696365730000) { /* "slices" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = mac_rslicing_Slice_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "slices" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "slices" */
            } /* descend "schedule" */
        } /* branch "schedule" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_UlDlSliceConfig_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_UlDlSliceConfig_parse_json_table);
}

static const char *mac_rslicing_SliceConfig_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffff000000000000) == 0x756c000000000000) { /* "ul" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
            if (mark != buf) {
                buf = mac_rslicing_UlDlSliceConfig_parse_json_table(ctx, buf, end, &ref);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "ul" */
            if ((w & 0xffff000000000000) == 0x646c000000000000) { /* "dl" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    buf = mac_rslicing_UlDlSliceConfig_parse_json_table(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "dl" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "dl" */
        } /* "ul" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_SliceConfig_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_SliceConfig_parse_json_table);
}

static const char *mac_rslicing_UeSliceAssoc_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x726e746900000000) { /* branch "rnti" */
            if ((w & 0xffffffff00000000) == 0x646c496400000000) { /* "dlId" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                        flatbuffers_uint32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "dlId" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "dlId" */
        } else { /* branch "rnti" */
            if ((w & 0xffffffff00000000) == 0x756c496400000000) { /* "ulId" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                        flatbuffers_uint32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ulId" */
                if ((w & 0xffffffff00000000) == 0x726e746900000000) { /* "rnti" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        uint16_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                rslicing_local_mac_rslicing_json_parser_enum,
                                rslicing_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 2, 2))) goto failed;
                            flatbuffers_uint16_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "rnti" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "rnti" */
            } /* "ulId" */
        } /* branch "rnti" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_UeSliceAssoc_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_UeSliceAssoc_parse_json_table);
}

static const char *mac_rslicing_UeSliceConfig_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffff0000000000) == 0x7565730000000000) { /* "ues" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
            if (mark != buf) {
                if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                while (more) {
                    buf = mac_rslicing_UeSliceAssoc_parse_json_table(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                    *pref = ref;
                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                }
                ref = flatcc_builder_end_offset_vector(ctx->ctx);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "ues" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "ues" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_UeSliceConfig_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_UeSliceConfig_parse_json_table);
}

static const char *mac_rslicing_DelSliceConfig_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffff000000000000) == 0x756c000000000000) { /* "ul" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
            if (mark != buf) {
                if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                while (more) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_uint32_write_to_pe(pval, val);
                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                }
                ref = flatcc_builder_end_vector(ctx->ctx);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "ul" */
            if ((w & 0xffff000000000000) == 0x646c000000000000) { /* "dl" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        uint32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                rslicing_local_mac_rslicing_json_parser_enum,
                                rslicing_global_json_parser_enum, 0 };
                        if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        flatbuffers_uint32_write_to_pe(pval, val);
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    ref = flatcc_builder_end_vector(ctx->ctx);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "dl" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "dl" */
        } /* "ul" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_DelSliceConfig_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_DelSliceConfig_parse_json_table);
}

static const char *mac_rslicing_ReportOccasion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x6f6e4368616e6765) { /* "onChange" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "onChange" */
        return unmatched;
    } /* "onChange" */
    return buf;
}

static const char *mac_rslicing_EventTrigger_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x7265706f72744f63) { /* descend "reportOc" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffff0000) == 0x636173696f6e0000) { /* "casion" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            mac_rslicing_ReportOccasion_parse_json_enum,
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_uint8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "casion" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "casion" */
        } else { /* descend "reportOc" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "reportOc" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_EventTrigger_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_EventTrigger_parse_json_table);
}

static const char *mac_rslicing_IndicationHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_IndicationHeader_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_IndicationHeader_parse_json_table);
}

static const char *mac_rslicing_IndicationMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x736c696365436f6e) { /* descend "sliceCon" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x6669670000000000) { /* "fig" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    buf = mac_rslicing_SliceConfig_parse_json_table(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "fig" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "fig" */
        } else { /* descend "sliceCon" */
            if (w == 0x7565536c69636543) { /* descend "ueSliceC" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x6f6e666967000000) { /* "onfig" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        buf = mac_rslicing_UeSliceConfig_parse_json_table(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "onfig" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "onfig" */
            } else { /* descend "ueSliceC" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "ueSliceC" */
        } /* descend "sliceCon" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_IndicationMessage_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_IndicationMessage_parse_json_table);
}

static const char *mac_rslicing_ControlHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_ControlHeader_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_ControlHeader_parse_json_table);
}

static const char *mac_rslicing_AddModSliceCommand_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x736c696365436f6e) { /* descend "sliceCon" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x6669670000000000) { /* "fig" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    buf = mac_rslicing_SliceConfig_parse_json_table(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "fig" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "fig" */
        } else { /* descend "sliceCon" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "sliceCon" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_AddModSliceCommand_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_AddModSliceCommand_parse_json_table);
}

static const char *mac_rslicing_DelSliceCommand_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x64656c536c696365) { /* descend "delSlice" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffff0000) == 0x436f6e6669670000) { /* "Config" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    buf = mac_rslicing_DelSliceConfig_parse_json_table(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "Config" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "Config" */
        } else { /* descend "delSlice" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "delSlice" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_DelSliceCommand_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_DelSliceCommand_parse_json_table);
}

static const char *mac_rslicing_UeSliceAssocCommand_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x7565536c69636543) { /* descend "ueSliceC" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffff000000) == 0x6f6e666967000000) { /* "onfig" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    buf = mac_rslicing_UeSliceConfig_parse_json_table(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "onfig" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "onfig" */
        } else { /* descend "ueSliceC" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "ueSliceC" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_UeSliceAssocCommand_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_UeSliceAssocCommand_parse_json_table);
}

static const char *mac_rslicing_ControlCommand_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* addModSlice */
        buf = mac_rslicing_AddModSliceCommand_parse_json_table(ctx, buf, end, result);
        break;
    case 2: /* delSlice */
        buf = mac_rslicing_DelSliceCommand_parse_json_table(ctx, buf, end, result);
        break;
    case 3: /* ueSliceAssoc */
        buf = mac_rslicing_UeSliceAssocCommand_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int mac_rslicing_ControlCommand_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* addModSlice */
    case 2: return 1; /* delSlice */
    case 3: return 1; /* ueSliceAssoc */
    default: return 0;
    }
}

static const char *mac_rslicing_ControlCommand_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x6164644d6f64536c) { /* branch "addModSl" */
        if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "NONE" */
            return unmatched;
        } /* "NONE" */
    } else { /* branch "addModSl" */
        if (w < 0x64656c536c696365) { /* branch "delSlice" */
            if (w == 0x6164644d6f64536c) { /* descend "addModSl" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x6963650000000000) { /* "ice" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(1), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "ice" */
                    return unmatched;
                } /* "ice" */
            } else { /* descend "addModSl" */
                return unmatched;
            } /* descend "addModSl" */
        } else { /* branch "delSlice" */
            if (w == 0x64656c536c696365) { /* "delSlice" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(2), *value_sign = 0;
                } else {
                    goto pfguard1;
                }
            } else { /* "delSlice" */
                goto pfguard1;
            } /* "delSlice" */
            goto endpfguard1;
pfguard1:
            if (w == 0x7565536c69636541) { /* descend "ueSliceA" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffff00000000) == 0x73736f6300000000) { /* "ssoc" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(3), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "ssoc" */
                    return unmatched;
                } /* "ssoc" */
            } else { /* descend "ueSliceA" */
                return unmatched;
            } /* descend "ueSliceA" */
endpfguard1:
            (void)0;
        } /* branch "delSlice" */
    } /* branch "addModSl" */
    return buf;
}

static const char *mac_rslicing_ControlMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x636f6d6d616e645f) { /* descend "command_" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            mac_rslicing_ControlCommand_parse_json_enum,
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, mac_rslicing_ControlCommand_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "type" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "type" */
        } else { /* descend "command_" */
            if ((w & 0xffffffffffffff00) == 0x636f6d6d616e6400) { /* "command" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, mac_rslicing_ControlCommand_parse_json_union);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "command" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "command" */
        } /* descend "command_" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_ControlMessage_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_ControlMessage_parse_json_table);
}

static const char *mac_rslicing_ControlOutcome_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x646961676e6f7374) { /* descend "diagnost" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x6963000000000000) { /* "ic" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ic" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ic" */
        } else { /* descend "diagnost" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "diagnost" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_ControlOutcome_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_ControlOutcome_parse_json_table);
}

static const char *mac_rslicing_CallProcessId_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffff000000000000) == 0x6964000000000000) { /* "id" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
            if (mark != buf) {
                uint32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        rslicing_local_mac_rslicing_json_parser_enum,
                        rslicing_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_uint32_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "id" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "id" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_CallProcessId_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_CallProcessId_parse_json_table);
}

static const char *mac_rslicing_SupportedAlgorithm_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x616c676f72697468) { /* descend "algorith" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x6d00000000000000) { /* "m" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            mac_rslicing_SliceAlgorithm_parse_json_enum,
                            rslicing_local_mac_rslicing_json_parser_enum,
                            rslicing_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_uint8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "m" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "m" */
        } else { /* descend "algorith" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "algorith" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_SupportedAlgorithm_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_SupportedAlgorithm_parse_json_table);
}

static const char *mac_rslicing_RanFunctionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x737570706f727465) { /* descend "supporte" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x64416c676f726974) { /* descend "dAlgorit" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x686d730000000000) { /* "hms" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = mac_rslicing_SupportedAlgorithm_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "hms" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "hms" */
            } else { /* descend "dAlgorit" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "dAlgorit" */
        } else { /* descend "supporte" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "supporte" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_rslicing_RanFunctionDefinition_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_rslicing_RanFunctionDefinition_parse_json_table);
}

static const char *rslicing_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *rslicing_local_mac_rslicing_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x5265706f72744f63) { /* branch "ReportOc" */
        if (w == 0x436f6e74726f6c43) { /* descend "ControlC" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffff0000) == 0x6f6d6d616e640000) { /* "ommand" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                if (buf != mark) {
                    buf = mac_rslicing_ControlCommand_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "ommand" */
                return unmatched;
            } /* "ommand" */
        } else { /* descend "ControlC" */
            if (w == 0x4e7673536c696365) { /* descend "NvsSlice" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffff0000) == 0x436f6e6669670000) { /* "Config" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                    if (buf != mark) {
                        buf = mac_rslicing_NvsSliceConfig_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "Config" */
                    return unmatched;
                } /* "Config" */
            } else { /* descend "NvsSlice" */
                return unmatched;
            } /* descend "NvsSlice" */
        } /* descend "ControlC" */
    } else { /* branch "ReportOc" */
        if (w < 0x53636e3139536c69) { /* branch "Scn19Sli" */
            if (w == 0x5265706f72744f63) { /* descend "ReportOc" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffff0000) == 0x636173696f6e0000) { /* "casion" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                    if (buf != mark) {
                        buf = mac_rslicing_ReportOccasion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "casion" */
                    return unmatched;
                } /* "casion" */
            } else { /* descend "ReportOc" */
                return unmatched;
            } /* descend "ReportOc" */
        } else { /* branch "Scn19Sli" */
            if (w < 0x536c696365416c67) { /* branch "SliceAlg" */
                if (w == 0x53636e3139536c69) { /* descend "Scn19Sli" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6365436f6e666967) { /* "ceConfig" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                        if (buf != mark) {
                            buf = mac_rslicing_Scn19SliceConfig_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "ceConfig" */
                        return unmatched;
                    } /* "ceConfig" */
                } else { /* descend "Scn19Sli" */
                    return unmatched;
                } /* descend "Scn19Sli" */
            } else { /* branch "SliceAlg" */
                if (w == 0x536c696365416c67) { /* descend "SliceAlg" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffffff0000) == 0x6f726974686d0000) { /* "orithm" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                        if (buf != mark) {
                            buf = mac_rslicing_SliceAlgorithm_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "orithm" */
                        return unmatched;
                    } /* "orithm" */
                } else { /* descend "SliceAlg" */
                    if (w == 0x536c696365506172) { /* descend "SlicePar" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffff0000000000) == 0x616d730000000000) { /* "ams" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                            if (buf != mark) {
                                buf = mac_rslicing_SliceParams_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "ams" */
                            return unmatched;
                        } /* "ams" */
                    } else { /* descend "SlicePar" */
                        return unmatched;
                    } /* descend "SlicePar" */
                } /* descend "SliceAlg" */
            } /* branch "SliceAlg" */
        } /* branch "Scn19Sli" */
    } /* branch "ReportOc" */
    return buf;
}

static const char *rslicing_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x6d61632e72736c69) { /* descend "mac.rsli" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x63696e672e526570) { /* branch "cing.Rep" */
            if (w == 0x63696e672e436f6e) { /* descend "cing.Con" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x74726f6c436f6d6d) { /* descend "trolComm" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffff0000000000) == 0x616e640000000000) { /* "and" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                        if (buf != mark) {
                            buf = mac_rslicing_ControlCommand_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "and" */
                        return unmatched;
                    } /* "and" */
                } else { /* descend "trolComm" */
                    return unmatched;
                } /* descend "trolComm" */
            } else { /* descend "cing.Con" */
                if (w == 0x63696e672e4e7673) { /* descend "cing.Nvs" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x536c696365436f6e) { /* descend "SliceCon" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffff0000000000) == 0x6669670000000000) { /* "fig" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                            if (buf != mark) {
                                buf = mac_rslicing_NvsSliceConfig_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "fig" */
                            return unmatched;
                        } /* "fig" */
                    } else { /* descend "SliceCon" */
                        return unmatched;
                    } /* descend "SliceCon" */
                } else { /* descend "cing.Nvs" */
                    return unmatched;
                } /* descend "cing.Nvs" */
            } /* descend "cing.Con" */
        } else { /* branch "cing.Rep" */
            if (w < 0x63696e672e53636e) { /* branch "cing.Scn" */
                if (w == 0x63696e672e526570) { /* descend "cing.Rep" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6f72744f63636173) { /* descend "ortOccas" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffff0000000000) == 0x696f6e0000000000) { /* "ion" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                            if (buf != mark) {
                                buf = mac_rslicing_ReportOccasion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "ion" */
                            return unmatched;
                        } /* "ion" */
                    } else { /* descend "ortOccas" */
                        return unmatched;
                    } /* descend "ortOccas" */
                } else { /* descend "cing.Rep" */
                    return unmatched;
                } /* descend "cing.Rep" */
            } else { /* branch "cing.Scn" */
                if (w < 0x63696e672e536c69) { /* branch "cing.Sli" */
                    if (w == 0x63696e672e53636e) { /* descend "cing.Scn" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x3139536c69636543) { /* descend "19SliceC" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffff000000) == 0x6f6e666967000000) { /* "onfig" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                                if (buf != mark) {
                                    buf = mac_rslicing_Scn19SliceConfig_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "onfig" */
                                return unmatched;
                            } /* "onfig" */
                        } else { /* descend "19SliceC" */
                            return unmatched;
                        } /* descend "19SliceC" */
                    } else { /* descend "cing.Scn" */
                        return unmatched;
                    } /* descend "cing.Scn" */
                } else { /* branch "cing.Sli" */
                    if (w == 0x63696e672e536c69) { /* descend "cing.Sli" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x6365416c676f7269) { /* descend "ceAlgori" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffff0000000000) == 0x74686d0000000000) { /* "thm" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                                if (buf != mark) {
                                    buf = mac_rslicing_SliceAlgorithm_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "thm" */
                                return unmatched;
                            } /* "thm" */
                        } else { /* descend "ceAlgori" */
                            if (w == 0x6365506172616d73) { /* "ceParams" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                                if (buf != mark) {
                                    buf = mac_rslicing_SliceParams_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "ceParams" */
                                return unmatched;
                            } /* "ceParams" */
                        } /* descend "ceAlgori" */
                    } else { /* descend "cing.Sli" */
                        return unmatched;
                    } /* descend "cing.Sli" */
                } /* branch "cing.Sli" */
            } /* branch "cing.Scn" */
        } /* branch "cing.Rep" */
    } else { /* descend "mac.rsli" */
        return unmatched;
    } /* descend "mac.rsli" */
    return buf;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* RSLICING_JSON_PARSER_H */
