#ifndef MAC_STATS_JSON_PARSER_H
#define MAC_STATS_JSON_PARSER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#include "flatcc/flatcc_prologue.h"

static const char *mac_stats_EventTrigger_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_stats_ReportStyleType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *mac_stats_ReportStyle_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_stats_ActionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_stats_IndicationHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_stats_bsrStat_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *mac_stats_bsrStat_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_stats_UEStats_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_stats_IndicationMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_stats_RanFunctionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *mac_stats_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *mac_stats_local_mac_stats_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *mac_stats_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *mac_stats_EventTrigger_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6d735265706f7274) { /* descend "msReport" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffff0000) == 0x506572696f640000) { /* "Period" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    uint16_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            mac_stats_local_mac_stats_json_parser_enum,
                            mac_stats_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 2, 2))) goto failed;
                        flatbuffers_uint16_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "Period" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "Period" */
        } else { /* descend "msReport" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "msReport" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_stats_EventTrigger_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_stats_EventTrigger_parse_json_table);
}

static const char *mac_stats_ReportStyleType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffffffffff00) == 0x4d696e696d616c00) { /* "Minimal" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "Minimal" */
        if (w == 0x436f6d706c657465) { /* "Complete" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "Complete" */
            return unmatched;
        } /* "Complete" */
    } /* "Minimal" */
    return buf;
}

static const char *mac_stats_ReportStyle_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                uint8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        mac_stats_ReportStyleType_parse_json_enum,
                        mac_stats_local_mac_stats_json_parser_enum,
                        mac_stats_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                    flatbuffers_uint8_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "type" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "type" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_stats_ReportStyle_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_stats_ReportStyle_parse_json_table);
}

static const char *mac_stats_ActionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x7265706f72745374) { /* descend "reportSt" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x796c650000000000) { /* "yle" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    buf = mac_stats_ReportStyle_parse_json_table(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "yle" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "yle" */
        } else { /* descend "reportSt" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "reportSt" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_stats_ActionDefinition_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_stats_ActionDefinition_parse_json_table);
}

static const char *mac_stats_IndicationHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x736c6f7400000000) { /* "slot" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                uint8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        mac_stats_local_mac_stats_json_parser_enum,
                        mac_stats_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                    flatbuffers_uint8_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "slot" */
            if ((w & 0xffffffffff000000) == 0x6672616d65000000) { /* "frame" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    uint16_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            mac_stats_local_mac_stats_json_parser_enum,
                            mac_stats_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 2, 2))) goto failed;
                        flatbuffers_uint16_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "frame" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "frame" */
        } /* "slot" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_stats_IndicationHeader_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_stats_IndicationHeader_parse_json_table);
}

static const char *mac_stats_bsrStat_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6275666665725369) { /* descend "bufferSi" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x7a65000000000000) { /* "ze" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            mac_stats_local_mac_stats_json_parser_enum,
                            mac_stats_global_json_parser_enum, 0 };
                    pval = (void *)((size_t)struct_base + 4);
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_uint32_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ze" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ze" */
        } else { /* descend "bufferSi" */
            if ((w & 0xffffffffff000000) == 0x6c63676964000000) { /* "lcgid" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            mac_stats_local_mac_stats_json_parser_enum,
                            mac_stats_global_json_parser_enum, 0 };
                    pval = (void *)((size_t)struct_base + 0);
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_uint8_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "lcgid" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "lcgid" */
        } /* descend "bufferSi" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *mac_stats_bsrStat_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 8, 4))) goto failed;
    buf = mac_stats_bsrStat_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_stats_bsrStat_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, mac_stats_bsrStat_parse_json_struct);
}

static const char *mac_stats_UEStats_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 22)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x7075636368536e72) { /* branch "pucchSnr" */
            if (w < 0x646c416767725364) { /* branch "dlAggrSd" */
                if (w < 0x646c416767724279) { /* branch "dlAggrBy" */
                    if ((w & 0xffffff0000000000) == 0x6273720000000000) { /* "bsr" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 8, 4, UINT64_C(536870911))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = mac_stats_bsrStat_parse_json_struct_inline(ctx, buf, end, pval);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 19))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "bsr" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "bsr" */
                } else { /* branch "dlAggrBy" */
                    if (w < 0x646c416767725072) { /* branch "dlAggrPr" */
                        if (w == 0x646c416767724279) { /* descend "dlAggrBy" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffffff00) == 0x7465735364757300) { /* "tesSdus" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                                if (mark != buf) {
                                    uint64_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 7, 8, 8))) goto failed;
                                        flatbuffers_uint64_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "tesSdus" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "tesSdus" */
                        } else { /* descend "dlAggrBy" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "dlAggrBy" */
                    } else { /* branch "dlAggrPr" */
                        if (w == 0x646c416767725072) { /* descend "dlAggrPr" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6200000000000000) { /* "b" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    uint32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                                        flatbuffers_uint32_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "b" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "b" */
                        } else { /* descend "dlAggrPr" */
                            if (w == 0x646c416767725265) { /* descend "dlAggrRe" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffff000000) == 0x7478507262000000) { /* "txPrb" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                                    if (mark != buf) {
                                        uint32_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                mac_stats_local_mac_stats_json_parser_enum,
                                                mac_stats_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 9, 4, 4))) goto failed;
                                            flatbuffers_uint32_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "txPrb" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "txPrb" */
                            } else { /* descend "dlAggrRe" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "dlAggrRe" */
                        } /* descend "dlAggrPr" */
                    } /* branch "dlAggrPr" */
                } /* branch "dlAggrBy" */
            } else { /* branch "dlAggrSd" */
                if (w < 0x646c486172710000) { /* branch "dlHarq" */
                    if (w == 0x646c416767725364) { /* descend "dlAggrSd" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffff000000000000) == 0x7573000000000000) { /* "us" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                            if (mark != buf) {
                                uint32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        mac_stats_local_mac_stats_json_parser_enum,
                                        mac_stats_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 4, 4))) goto failed;
                                    flatbuffers_uint32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "us" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "us" */
                    } else { /* descend "dlAggrSd" */
                        if (w == 0x646c416767725462) { /* descend "dlAggrTb" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    uint64_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 8, 8))) goto failed;
                                        flatbuffers_uint64_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "s" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "s" */
                        } else { /* descend "dlAggrTb" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "dlAggrTb" */
                    } /* descend "dlAggrSd" */
                } else { /* branch "dlHarq" */
                    if (w < 0x646c4d6373310000) { /* branch "dlMcs1" */
                        if ((w & 0xffffffffffff0000) == 0x646c486172710000) { /* "dlHarq" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    uint32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_uint32_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 20))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "dlHarq" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "dlHarq" */
                    } else { /* branch "dlMcs1" */
                        if (w < 0x646c4d6373320000) { /* branch "dlMcs2" */
                            if ((w & 0xffffffffffff0000) == 0x646c4d6373310000) { /* "dlMcs1" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 12, 1, 1))) goto failed;
                                        flatbuffers_uint8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "dlMcs1" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "dlMcs1" */
                        } else { /* branch "dlMcs2" */
                            if ((w & 0xffffff0000000000) == 0x7068720000000000) { /* "phr" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                if (mark != buf) {
                                    int8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 18, 1, 1))) goto failed;
                                        flatbuffers_int8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "phr" */
                                if ((w & 0xffffffffffff0000) == 0x646c4d6373320000) { /* "dlMcs2" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                                    if (mark != buf) {
                                        uint8_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                mac_stats_local_mac_stats_json_parser_enum,
                                                mac_stats_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 14, 1, 1))) goto failed;
                                            flatbuffers_uint8_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "dlMcs2" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "dlMcs2" */
                            } /* "phr" */
                        } /* branch "dlMcs2" */
                    } /* branch "dlMcs1" */
                } /* branch "dlHarq" */
            } /* branch "dlAggrSd" */
        } else { /* branch "pucchSnr" */
            if (w < 0x756c416767725265) { /* branch "ulAggrRe" */
                if (w < 0x726e746900000000) { /* branch "rnti" */
                    if (w == 0x7075736368536e72) { /* "puschSnr" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                        if (mark != buf) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    mac_stats_local_mac_stats_json_parser_enum,
                                    mac_stats_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != -64.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 16, 4, 4))) goto failed;
                                flatbuffers_float_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "puschSnr" */
                        if (w == 0x7075636368536e72) { /* "pucchSnr" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                            if (mark != buf) {
                                float val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        mac_stats_local_mac_stats_json_parser_enum,
                                        mac_stats_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != -64.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 17, 4, 4))) goto failed;
                                    flatbuffers_float_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "pucchSnr" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "pucchSnr" */
                    } /* "puschSnr" */
                } else { /* branch "rnti" */
                    if (w < 0x756c416767724279) { /* branch "ulAggrBy" */
                        if ((w & 0xffffffff00000000) == 0x726e746900000000) { /* "rnti" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                uint16_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        mac_stats_local_mac_stats_json_parser_enum,
                                        mac_stats_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 2, 2))) goto failed;
                                    flatbuffers_uint16_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "rnti" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "rnti" */
                    } else { /* branch "ulAggrBy" */
                        if (w == 0x756c416767724279) { /* descend "ulAggrBy" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffffff00) == 0x7465735364757300) { /* "tesSdus" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                                if (mark != buf) {
                                    uint64_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 8, 8, 8))) goto failed;
                                        flatbuffers_uint64_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "tesSdus" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "tesSdus" */
                        } else { /* descend "ulAggrBy" */
                            if (w == 0x756c416767725072) { /* descend "ulAggrPr" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x6200000000000000) { /* "b" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        uint32_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                mac_stats_local_mac_stats_json_parser_enum,
                                                mac_stats_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                            flatbuffers_uint32_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "b" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "b" */
                            } else { /* descend "ulAggrPr" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "ulAggrPr" */
                        } /* descend "ulAggrBy" */
                    } /* branch "ulAggrBy" */
                } /* branch "rnti" */
            } else { /* branch "ulAggrRe" */
                if (w < 0x756c486172710000) { /* branch "ulHarq" */
                    if (w < 0x756c416767725364) { /* branch "ulAggrSd" */
                        if (w == 0x756c416767725265) { /* descend "ulAggrRe" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffff000000) == 0x7478507262000000) { /* "txPrb" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                                if (mark != buf) {
                                    uint32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 10, 4, 4))) goto failed;
                                        flatbuffers_uint32_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "txPrb" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "txPrb" */
                        } else { /* descend "ulAggrRe" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "ulAggrRe" */
                    } else { /* branch "ulAggrSd" */
                        if (w == 0x756c416767725364) { /* descend "ulAggrSd" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffff000000000000) == 0x7573000000000000) { /* "us" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                if (mark != buf) {
                                    uint32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 6, 4, 4))) goto failed;
                                        flatbuffers_uint32_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "us" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "us" */
                        } else { /* descend "ulAggrSd" */
                            if (w == 0x756c416767725462) { /* descend "ulAggrTb" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                    if (mark != buf) {
                                        uint64_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                mac_stats_local_mac_stats_json_parser_enum,
                                                mac_stats_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 8, 8))) goto failed;
                                            flatbuffers_uint64_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "s" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "s" */
                            } else { /* descend "ulAggrTb" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "ulAggrTb" */
                        } /* descend "ulAggrSd" */
                    } /* branch "ulAggrSd" */
                } else { /* branch "ulHarq" */
                    if (w < 0x756c4d6373310000) { /* branch "ulMcs1" */
                        if ((w & 0xffffffffffff0000) == 0x756c486172710000) { /* "ulHarq" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    uint32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_uint32_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 21))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "ulHarq" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "ulHarq" */
                    } else { /* branch "ulMcs1" */
                        if (w < 0x756c4d6373320000) { /* branch "ulMcs2" */
                            if ((w & 0xffffffffffff0000) == 0x756c4d6373310000) { /* "ulMcs1" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 13, 1, 1))) goto failed;
                                        flatbuffers_uint8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "ulMcs1" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "ulMcs1" */
                        } else { /* branch "ulMcs2" */
                            if ((w & 0xffffffffff000000) == 0x7762437169000000) { /* "wbCqi" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            mac_stats_local_mac_stats_json_parser_enum,
                                            mac_stats_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 11, 1, 1))) goto failed;
                                        flatbuffers_uint8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "wbCqi" */
                                if ((w & 0xffffffffffff0000) == 0x756c4d6373320000) { /* "ulMcs2" */
                                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                                    if (mark != buf) {
                                        uint8_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                mac_stats_local_mac_stats_json_parser_enum,
                                                mac_stats_global_json_parser_enum, 0 };
                                        buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 15, 1, 1))) goto failed;
                                            flatbuffers_uint8_write_to_pe(pval, val);
                                        }
                                    } else {
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    }
                                } else { /* "ulMcs2" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* "ulMcs2" */
                            } /* "wbCqi" */
                        } /* branch "ulMcs2" */
                    } /* branch "ulMcs1" */
                } /* branch "ulHarq" */
            } /* branch "ulAggrRe" */
        } /* branch "pucchSnr" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_stats_UEStats_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_stats_UEStats_parse_json_table);
}

static const char *mac_stats_IndicationMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffffff00) == 0x7565537461747300) { /* "ueStats" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
            if (mark != buf) {
                if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                while (more) {
                    buf = mac_stats_UEStats_parse_json_table(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                    *pref = ref;
                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                }
                ref = flatcc_builder_end_offset_vector(ctx->ctx);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "ueStats" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "ueStats" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_stats_IndicationMessage_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_stats_IndicationMessage_parse_json_table);
}

static const char *mac_stats_RanFunctionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x737570706f727465) { /* descend "supporte" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x645265706f727453) { /* descend "dReportS" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x74796c6573000000) { /* "tyles" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = mac_stats_ReportStyle_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "tyles" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "tyles" */
            } else { /* descend "dReportS" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "dReportS" */
        } else { /* descend "supporte" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "supporte" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int mac_stats_RanFunctionDefinition_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, mac_stats_RanFunctionDefinition_parse_json_table);
}

static const char *mac_stats_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *mac_stats_local_mac_stats_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x5265706f72745374) { /* descend "ReportSt" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffffff00) == 0x796c655479706500) { /* "yleType" */
            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
            if (buf != mark) {
                buf = mac_stats_ReportStyleType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
            } else {
                return unmatched;
            }
        } else { /* "yleType" */
            return unmatched;
        } /* "yleType" */
    } else { /* descend "ReportSt" */
        return unmatched;
    } /* descend "ReportSt" */
    return buf;
}

static const char *mac_stats_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x6d61632e73746174) { /* descend "mac.stat" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x732e5265706f7274) { /* descend "s.Report" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x5374796c65547970) { /* descend "StyleTyp" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                    if (buf != mark) {
                        buf = mac_stats_ReportStyleType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "e" */
                    return unmatched;
                } /* "e" */
            } else { /* descend "StyleTyp" */
                return unmatched;
            } /* descend "StyleTyp" */
        } else { /* descend "s.Report" */
            return unmatched;
        } /* descend "s.Report" */
    } else { /* descend "mac.stat" */
        return unmatched;
    } /* descend "mac.stat" */
    return buf;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* MAC_STATS_JSON_PARSER_H */
