#ifndef RRC_CONF_JSON_PRINTER_H
#define RRC_CONF_JSON_PRINTER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_printer.h"
#ifndef RRC_COMMON_JSON_PRINTER_H
#include "rrc_common_json_printer.h"
#endif
#include "flatcc/flatcc_prologue.h"

static void rrc_conf_EventTrigger_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void rrc_conf_ReportStyle_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void rrc_conf_ActionDefinition_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void rrc_conf_IndicationHeader_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void rrc_conf_Lte_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void rrc_conf_Nr_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void rrc_conf_CarrierInfo_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void rrc_conf_BSStats_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void rrc_conf_IndicationMessage_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void rrc_conf_RanFunctionDefinition_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);

static void rrc_conf_ReportOccasion_print_json_enum(flatcc_json_printer_t *ctx, uint8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "onChange", 8); break;
    default: flatcc_json_printer_uint8(ctx, v); break;
    }
}

static void rrc_conf_ReportStyleType_print_json_enum(flatcc_json_printer_t *ctx, uint8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "Minimal", 7); break;
    case 1: flatcc_json_printer_enum(ctx, "Complete", 8); break;
    default: flatcc_json_printer_uint8(ctx, v); break;
    }
}

static void rrc_conf_EventTrigger_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint8_enum_field(ctx, td, 0, "reportOccasion", 14, 0, rrc_conf_ReportOccasion_print_json_enum);
}

static inline int rrc_conf_EventTrigger_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, rrc_conf_EventTrigger_print_json_table);
}

static void rrc_conf_ReportStyle_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint8_enum_field(ctx, td, 0, "type", 4, 0, rrc_conf_ReportStyleType_print_json_enum);
}

static inline int rrc_conf_ReportStyle_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, rrc_conf_ReportStyle_print_json_table);
}

static void rrc_conf_ActionDefinition_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_table_field(ctx, td, 0, "reportStyle", 11, rrc_conf_ReportStyle_print_json_table);
}

static inline int rrc_conf_ActionDefinition_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, rrc_conf_ActionDefinition_print_json_table);
}

static void rrc_conf_IndicationHeader_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int rrc_conf_IndicationHeader_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, rrc_conf_IndicationHeader_print_json_table);
}

static void rrc_conf_Lte_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int rrc_conf_Lte_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, rrc_conf_Lte_print_json_table);
}

static void rrc_conf_Nr_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint8_field(ctx, td, 0, "numerology", 10, 0);
}

static inline int rrc_conf_Nr_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, rrc_conf_Nr_print_json_table);
}

static void rrc_conf_CarrierInfo_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint8_field(ctx, td, 0, "id", 2, 0);
    flatcc_json_printer_uint16_field(ctx, td, 1, "phyCellId", 9, 0);
    flatcc_json_printer_uint16_field(ctx, td, 2, "band", 4, 0);
    flatcc_json_printer_uint64_field(ctx, td, 3, "dlFreqHz", 8, 0);
    flatcc_json_printer_uint64_field(ctx, td, 4, "ulFreqHz", 8, 0);
    flatcc_json_printer_uint16_field(ctx, td, 5, "dlBandwidthPrb", 14, 0);
    flatcc_json_printer_uint16_field(ctx, td, 6, "ulBandwidthPrb", 14, 0);
    flatcc_json_printer_uint8_field(ctx, td, 7, "txAntennaPorts", 14, 0);
    flatcc_json_printer_uint8_field(ctx, td, 8, "rxAnennaPorts", 13, 0);
    flatcc_json_printer_table_field(ctx, td, 9, "lte", 3, rrc_conf_Lte_print_json_table);
    flatcc_json_printer_table_field(ctx, td, 10, "nr", 2, rrc_conf_Nr_print_json_table);
}

static inline int rrc_conf_CarrierInfo_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, rrc_conf_CarrierInfo_print_json_table);
}

static void rrc_conf_BSStats_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint8_enum_field(ctx, td, 0, "rat", 3, 0, rrc_common_RAT_print_json_enum);
    flatcc_json_printer_string_field(ctx, td, 1, "baseStationName", 15);
    flatcc_json_printer_table_vector_field(ctx, td, 2, "plmnInfo", 8, rrc_common_PlmnInfo_print_json_table);
    flatcc_json_printer_table_field(ctx, td, 3, "targetPCell", 11, rrc_common_PlmnInfo_print_json_table);
    flatcc_json_printer_table_vector_field(ctx, td, 4, "carriers", 8, rrc_conf_CarrierInfo_print_json_table);
}

static inline int rrc_conf_BSStats_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, rrc_conf_BSStats_print_json_table);
}

static void rrc_conf_IndicationMessage_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_table_field(ctx, td, 0, "bsStats", 7, rrc_conf_BSStats_print_json_table);
}

static inline int rrc_conf_IndicationMessage_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, rrc_conf_IndicationMessage_print_json_table);
}

static void rrc_conf_RanFunctionDefinition_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_table_vector_field(ctx, td, 0, "supportedReportStyles", 21, rrc_conf_ReportStyle_print_json_table);
}

static inline int rrc_conf_RanFunctionDefinition_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, rrc_conf_RanFunctionDefinition_print_json_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* RRC_CONF_JSON_PRINTER_H */
