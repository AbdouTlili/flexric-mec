#ifndef RRC_CONF_JSON_PARSER_H
#define RRC_CONF_JSON_PARSER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#ifndef RRC_COMMON_JSON_PARSER_H
#include "rrc_common_json_parser.h"
#endif
#include "flatcc/flatcc_prologue.h"

static const char *rrc_conf_ReportOccasion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *rrc_conf_EventTrigger_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rrc_conf_ReportStyleType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *rrc_conf_ReportStyle_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rrc_conf_ActionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rrc_conf_IndicationHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rrc_conf_Lte_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rrc_conf_Nr_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rrc_conf_CarrierInfo_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rrc_conf_BSStats_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rrc_conf_IndicationMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rrc_conf_RanFunctionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *rrc_conf_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *rrc_conf_local_rrc_conf_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *rrc_conf_local_rrc_common_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *rrc_conf_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *rrc_conf_ReportOccasion_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x6f6e4368616e6765) { /* "onChange" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "onChange" */
        return unmatched;
    } /* "onChange" */
    return buf;
}

static const char *rrc_conf_EventTrigger_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x7265706f72744f63) { /* descend "reportOc" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffff0000) == 0x636173696f6e0000) { /* "casion" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            rrc_conf_ReportOccasion_parse_json_enum,
                            rrc_conf_local_rrc_conf_json_parser_enum,
                            rrc_conf_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_uint8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "casion" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "casion" */
        } else { /* descend "reportOc" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "reportOc" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int rrc_conf_EventTrigger_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, rrc_conf_EventTrigger_parse_json_table);
}

static const char *rrc_conf_ReportStyleType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffffffffff00) == 0x4d696e696d616c00) { /* "Minimal" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "Minimal" */
        if (w == 0x436f6d706c657465) { /* "Complete" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "Complete" */
            return unmatched;
        } /* "Complete" */
    } /* "Minimal" */
    return buf;
}

static const char *rrc_conf_ReportStyle_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                uint8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        rrc_conf_ReportStyleType_parse_json_enum,
                        rrc_conf_local_rrc_conf_json_parser_enum,
                        rrc_conf_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                    flatbuffers_uint8_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "type" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "type" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int rrc_conf_ReportStyle_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, rrc_conf_ReportStyle_parse_json_table);
}

static const char *rrc_conf_ActionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x7265706f72745374) { /* descend "reportSt" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x796c650000000000) { /* "yle" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    buf = rrc_conf_ReportStyle_parse_json_table(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "yle" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "yle" */
        } else { /* descend "reportSt" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "reportSt" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int rrc_conf_ActionDefinition_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, rrc_conf_ActionDefinition_parse_json_table);
}

static const char *rrc_conf_IndicationHeader_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int rrc_conf_IndicationHeader_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, rrc_conf_IndicationHeader_parse_json_table);
}

static const char *rrc_conf_Lte_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int rrc_conf_Lte_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, rrc_conf_Lte_parse_json_table);
}

static const char *rrc_conf_Nr_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6e756d65726f6c6f) { /* descend "numerolo" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x6779000000000000) { /* "gy" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            rrc_conf_local_rrc_conf_json_parser_enum,
                            rrc_conf_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_uint8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "gy" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "gy" */
        } else { /* descend "numerolo" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "numerolo" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int rrc_conf_Nr_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, rrc_conf_Nr_parse_json_table);
}

static const char *rrc_conf_CarrierInfo_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 11)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6e72000000000000) { /* branch "nr" */
            if (w < 0x646c46726571487a) { /* branch "dlFreqHz" */
                if ((w & 0xffffffff00000000) == 0x62616e6400000000) { /* "band" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        uint16_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                rrc_conf_local_rrc_conf_json_parser_enum,
                                rrc_conf_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 2, 2))) goto failed;
                            flatbuffers_uint16_write_to_pe(pval, val);
                        }
                    } else {
                        goto pfguard1;
                    }
                } else { /* "band" */
                    goto pfguard1;
                } /* "band" */
                goto endpfguard1;
pfguard1:
                if (w == 0x646c42616e647769) { /* descend "dlBandwi" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffffff0000) == 0x6474685072620000) { /* "dthPrb" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                        if (mark != buf) {
                            uint16_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    rrc_conf_local_rrc_conf_json_parser_enum,
                                    rrc_conf_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 2, 2))) goto failed;
                                flatbuffers_uint16_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "dthPrb" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "dthPrb" */
                } else { /* descend "dlBandwi" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "dlBandwi" */
endpfguard1:
                (void)0;
            } else { /* branch "dlFreqHz" */
                if (w < 0x6964000000000000) { /* branch "id" */
                    if (w == 0x646c46726571487a) { /* "dlFreqHz" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                        if (mark != buf) {
                            uint64_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    rrc_conf_local_rrc_conf_json_parser_enum,
                                    rrc_conf_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 8, 8))) goto failed;
                                flatbuffers_uint64_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "dlFreqHz" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "dlFreqHz" */
                } else { /* branch "id" */
                    if ((w & 0xffffff0000000000) == 0x6c74650000000000) { /* "lte" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            buf = rrc_conf_Lte_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 9))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "lte" */
                        if ((w & 0xffff000000000000) == 0x6964000000000000) { /* "id" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                            if (mark != buf) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        rrc_conf_local_rrc_conf_json_parser_enum,
                                        rrc_conf_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                    flatbuffers_uint8_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "id" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "id" */
                    } /* "lte" */
                } /* branch "id" */
            } /* branch "dlFreqHz" */
        } else { /* branch "nr" */
            if (w < 0x7278416e656e6e61) { /* branch "rxAnenna" */
                if ((w & 0xffff000000000000) == 0x6e72000000000000) { /* "nr" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                    if (mark != buf) {
                        buf = rrc_conf_Nr_parse_json_table(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 10))) goto failed;
                        *pref = ref;
                    } else {
                        goto pfguard2;
                    }
                } else { /* "nr" */
                    goto pfguard2;
                } /* "nr" */
                goto endpfguard2;
pfguard2:
                if (w == 0x70687943656c6c49) { /* descend "phyCellI" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6400000000000000) { /* "d" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            uint16_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    rrc_conf_local_rrc_conf_json_parser_enum,
                                    rrc_conf_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 2, 2))) goto failed;
                                flatbuffers_uint16_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "d" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "d" */
                } else { /* descend "phyCellI" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "phyCellI" */
endpfguard2:
                (void)0;
            } else { /* branch "rxAnenna" */
                if (w < 0x7478416e74656e6e) { /* branch "txAntenn" */
                    if (w == 0x7278416e656e6e61) { /* descend "rxAnenna" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffff000000) == 0x506f727473000000) { /* "Ports" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                            if (mark != buf) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        rrc_conf_local_rrc_conf_json_parser_enum,
                                        rrc_conf_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 8, 1, 1))) goto failed;
                                    flatbuffers_uint8_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "Ports" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "Ports" */
                    } else { /* descend "rxAnenna" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "rxAnenna" */
                } else { /* branch "txAntenn" */
                    if (w < 0x756c42616e647769) { /* branch "ulBandwi" */
                        if (w == 0x7478416e74656e6e) { /* descend "txAntenn" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffff0000) == 0x61506f7274730000) { /* "aPorts" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            rrc_conf_local_rrc_conf_json_parser_enum,
                                            rrc_conf_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 7, 1, 1))) goto failed;
                                        flatbuffers_uint8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "aPorts" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "aPorts" */
                        } else { /* descend "txAntenn" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "txAntenn" */
                    } else { /* branch "ulBandwi" */
                        if (w == 0x756c42616e647769) { /* descend "ulBandwi" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffff0000) == 0x6474685072620000) { /* "dthPrb" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                                if (mark != buf) {
                                    uint16_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            rrc_conf_local_rrc_conf_json_parser_enum,
                                            rrc_conf_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 6, 2, 2))) goto failed;
                                        flatbuffers_uint16_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "dthPrb" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "dthPrb" */
                        } else { /* descend "ulBandwi" */
                            if (w == 0x756c46726571487a) { /* "ulFreqHz" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                if (mark != buf) {
                                    uint64_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            rrc_conf_local_rrc_conf_json_parser_enum,
                                            rrc_conf_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 8, 8))) goto failed;
                                        flatbuffers_uint64_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "ulFreqHz" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "ulFreqHz" */
                        } /* descend "ulBandwi" */
                    } /* branch "ulBandwi" */
                } /* branch "txAntenn" */
            } /* branch "rxAnenna" */
        } /* branch "nr" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int rrc_conf_CarrierInfo_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, rrc_conf_CarrierInfo_parse_json_table);
}

static const char *rrc_conf_BSStats_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 5)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x706c6d6e496e666f) { /* branch "plmnInfo" */
            if (w == 0x6261736553746174) { /* descend "baseStat" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffffff00) == 0x696f6e4e616d6500) { /* "ionName" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "ionName" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "ionName" */
            } else { /* descend "baseStat" */
                if (w == 0x6361727269657273) { /* "carriers" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = rrc_conf_CarrierInfo_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 4))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "carriers" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "carriers" */
            } /* descend "baseStat" */
        } else { /* branch "plmnInfo" */
            if (w < 0x7261740000000000) { /* branch "rat" */
                if (w == 0x706c6d6e496e666f) { /* "plmnInfo" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = rrc_common_PlmnInfo_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "plmnInfo" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "plmnInfo" */
            } else { /* branch "rat" */
                if ((w & 0xffffff0000000000) == 0x7261740000000000) { /* "rat" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        uint8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                rrc_common_RAT_parse_json_enum,
                                rrc_conf_local_rrc_conf_json_parser_enum,
                                rrc_conf_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                            flatbuffers_uint8_write_to_pe(pval, val);
                        }
                    } else {
                        goto pfguard1;
                    }
                } else { /* "rat" */
                    goto pfguard1;
                } /* "rat" */
                goto endpfguard1;
pfguard1:
                if (w == 0x7461726765745043) { /* descend "targetPC" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffff0000000000) == 0x656c6c0000000000) { /* "ell" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            buf = rrc_common_PlmnInfo_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "ell" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "ell" */
                } else { /* descend "targetPC" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "targetPC" */
endpfguard1:
                (void)0;
            } /* branch "rat" */
        } /* branch "plmnInfo" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int rrc_conf_BSStats_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, rrc_conf_BSStats_parse_json_table);
}

static const char *rrc_conf_IndicationMessage_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffffff00) == 0x6273537461747300) { /* "bsStats" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
            if (mark != buf) {
                buf = rrc_conf_BSStats_parse_json_table(ctx, buf, end, &ref);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "bsStats" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "bsStats" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int rrc_conf_IndicationMessage_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, rrc_conf_IndicationMessage_parse_json_table);
}

static const char *rrc_conf_RanFunctionDefinition_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x737570706f727465) { /* descend "supporte" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x645265706f727453) { /* descend "dReportS" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x74796c6573000000) { /* "tyles" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = rrc_conf_ReportStyle_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "tyles" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "tyles" */
            } else { /* descend "dReportS" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "dReportS" */
        } else { /* descend "supporte" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "supporte" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int rrc_conf_RanFunctionDefinition_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, rrc_conf_RanFunctionDefinition_parse_json_table);
}

static const char *rrc_conf_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *rrc_conf_local_rrc_conf_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x5265706f72744f63) { /* descend "ReportOc" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffff0000) == 0x636173696f6e0000) { /* "casion" */
            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
            if (buf != mark) {
                buf = rrc_conf_ReportOccasion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
            } else {
                return unmatched;
            }
        } else { /* "casion" */
            return unmatched;
        } /* "casion" */
    } else { /* descend "ReportOc" */
        if (w == 0x5265706f72745374) { /* descend "ReportSt" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffffff00) == 0x796c655479706500) { /* "yleType" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
                if (buf != mark) {
                    buf = rrc_conf_ReportStyleType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "yleType" */
                return unmatched;
            } /* "yleType" */
        } else { /* descend "ReportSt" */
            return unmatched;
        } /* descend "ReportSt" */
    } /* descend "ReportOc" */
    return buf;
}

static const char *rrc_conf_local_rrc_common_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffff0000000000) == 0x5241540000000000) { /* "RAT" */
        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
        if (buf != mark) {
            buf = rrc_common_RAT_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
        } else {
            return unmatched;
        }
    } else { /* "RAT" */
        return unmatched;
    } /* "RAT" */
    return buf;
}

static const char *rrc_conf_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x7272632e636f6e66) { /* branch "rrc.conf" */
        if (w == 0x7272632e636f6d6d) { /* descend "rrc.comm" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffff0000) == 0x6f6e2e5241540000) { /* "on.RAT" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                if (buf != mark) {
                    buf = rrc_common_RAT_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "on.RAT" */
                return unmatched;
            } /* "on.RAT" */
        } else { /* descend "rrc.comm" */
            return unmatched;
        } /* descend "rrc.comm" */
    } else { /* branch "rrc.conf" */
        if (w == 0x7272632e636f6e66) { /* descend "rrc.conf" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x2e5265706f72744f) { /* descend ".ReportO" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffffff00) == 0x63636173696f6e00) { /* "ccasion" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
                    if (buf != mark) {
                        buf = rrc_conf_ReportOccasion_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "ccasion" */
                    return unmatched;
                } /* "ccasion" */
            } else { /* descend ".ReportO" */
                if (w == 0x2e5265706f727453) { /* descend ".ReportS" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x74796c6554797065) { /* "tyleType" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                        if (buf != mark) {
                            buf = rrc_conf_ReportStyleType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "tyleType" */
                        return unmatched;
                    } /* "tyleType" */
                } else { /* descend ".ReportS" */
                    return unmatched;
                } /* descend ".ReportS" */
            } /* descend ".ReportO" */
        } else { /* descend "rrc.conf" */
            return unmatched;
        } /* descend "rrc.conf" */
    } /* branch "rrc.conf" */
    return buf;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* RRC_CONF_JSON_PARSER_H */
