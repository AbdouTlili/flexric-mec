#ifndef RRC_COMMON_BUILDER_H
#define RRC_COMMON_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef RRC_COMMON_READER_H
#include "rrc_common_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __rrc_common_RAT_formal_args , rrc_common_RAT_enum_t v0
#define __rrc_common_RAT_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, rrc_common_RAT, rrc_common_RAT_enum_t)

static const flatbuffers_voffset_t __rrc_common_Snssai_required[] = { 0 };
typedef flatbuffers_ref_t rrc_common_Snssai_ref_t;
static rrc_common_Snssai_ref_t rrc_common_Snssai_clone(flatbuffers_builder_t *B, rrc_common_Snssai_table_t t);
__flatbuffers_build_table(flatbuffers_, rrc_common_Snssai, 2)

static const flatbuffers_voffset_t __rrc_common_Plmn_required[] = { 0 };
typedef flatbuffers_ref_t rrc_common_Plmn_ref_t;
static rrc_common_Plmn_ref_t rrc_common_Plmn_clone(flatbuffers_builder_t *B, rrc_common_Plmn_table_t t);
__flatbuffers_build_table(flatbuffers_, rrc_common_Plmn, 4)

static const flatbuffers_voffset_t __rrc_common_PlmnInfo_required[] = { 0 };
typedef flatbuffers_ref_t rrc_common_PlmnInfo_ref_t;
static rrc_common_PlmnInfo_ref_t rrc_common_PlmnInfo_clone(flatbuffers_builder_t *B, rrc_common_PlmnInfo_table_t t);
__flatbuffers_build_table(flatbuffers_, rrc_common_PlmnInfo, 4)

#define __rrc_common_Snssai_formal_args , uint8_t v0, uint32_t v1
#define __rrc_common_Snssai_call_args , v0, v1
static inline rrc_common_Snssai_ref_t rrc_common_Snssai_create(flatbuffers_builder_t *B __rrc_common_Snssai_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rrc_common_Snssai, rrc_common_Snssai_file_identifier, rrc_common_Snssai_type_identifier)

#define __rrc_common_Plmn_formal_args , uint16_t v0, uint16_t v1, uint8_t v2, rrc_common_Snssai_vec_ref_t v3
#define __rrc_common_Plmn_call_args , v0, v1, v2, v3
static inline rrc_common_Plmn_ref_t rrc_common_Plmn_create(flatbuffers_builder_t *B __rrc_common_Plmn_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rrc_common_Plmn, rrc_common_Plmn_file_identifier, rrc_common_Plmn_type_identifier)

#define __rrc_common_PlmnInfo_formal_args , rrc_common_Plmn_ref_t v0, uint32_t v1, uint8_t v2, uint64_t v3
#define __rrc_common_PlmnInfo_call_args , v0, v1, v2, v3
static inline rrc_common_PlmnInfo_ref_t rrc_common_PlmnInfo_create(flatbuffers_builder_t *B __rrc_common_PlmnInfo_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, rrc_common_PlmnInfo, rrc_common_PlmnInfo_file_identifier, rrc_common_PlmnInfo_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, rrc_common_Snssai_sst, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), rrc_common_Snssai)
__flatbuffers_build_scalar_field(1, flatbuffers_, rrc_common_Snssai_sd, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), rrc_common_Snssai)

static inline rrc_common_Snssai_ref_t rrc_common_Snssai_create(flatbuffers_builder_t *B __rrc_common_Snssai_formal_args)
{
    if (rrc_common_Snssai_start(B)
        || rrc_common_Snssai_sd_add(B, v1)
        || rrc_common_Snssai_sst_add(B, v0)) {
        return 0;
    }
    return rrc_common_Snssai_end(B);
}

static rrc_common_Snssai_ref_t rrc_common_Snssai_clone(flatbuffers_builder_t *B, rrc_common_Snssai_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rrc_common_Snssai_start(B)
        || rrc_common_Snssai_sd_pick(B, t)
        || rrc_common_Snssai_sst_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rrc_common_Snssai_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, rrc_common_Plmn_mcc, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), rrc_common_Plmn)
__flatbuffers_build_scalar_field(1, flatbuffers_, rrc_common_Plmn_mnc, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), rrc_common_Plmn)
__flatbuffers_build_scalar_field(2, flatbuffers_, rrc_common_Plmn_mnc_length, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), rrc_common_Plmn)
__flatbuffers_build_table_vector_field(3, flatbuffers_, rrc_common_Plmn_snssai, rrc_common_Snssai, rrc_common_Plmn)

static inline rrc_common_Plmn_ref_t rrc_common_Plmn_create(flatbuffers_builder_t *B __rrc_common_Plmn_formal_args)
{
    if (rrc_common_Plmn_start(B)
        || rrc_common_Plmn_snssai_add(B, v3)
        || rrc_common_Plmn_mcc_add(B, v0)
        || rrc_common_Plmn_mnc_add(B, v1)
        || rrc_common_Plmn_mnc_length_add(B, v2)) {
        return 0;
    }
    return rrc_common_Plmn_end(B);
}

static rrc_common_Plmn_ref_t rrc_common_Plmn_clone(flatbuffers_builder_t *B, rrc_common_Plmn_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rrc_common_Plmn_start(B)
        || rrc_common_Plmn_snssai_pick(B, t)
        || rrc_common_Plmn_mcc_pick(B, t)
        || rrc_common_Plmn_mnc_pick(B, t)
        || rrc_common_Plmn_mnc_length_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rrc_common_Plmn_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, rrc_common_PlmnInfo_plmn, rrc_common_Plmn, rrc_common_PlmnInfo)
__flatbuffers_build_scalar_field(1, flatbuffers_, rrc_common_PlmnInfo_tac, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), rrc_common_PlmnInfo)
__flatbuffers_build_scalar_field(2, flatbuffers_, rrc_common_PlmnInfo_ranac, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), rrc_common_PlmnInfo)
__flatbuffers_build_scalar_field(3, flatbuffers_, rrc_common_PlmnInfo_cellId, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), rrc_common_PlmnInfo)

static inline rrc_common_PlmnInfo_ref_t rrc_common_PlmnInfo_create(flatbuffers_builder_t *B __rrc_common_PlmnInfo_formal_args)
{
    if (rrc_common_PlmnInfo_start(B)
        || rrc_common_PlmnInfo_cellId_add(B, v3)
        || rrc_common_PlmnInfo_plmn_add(B, v0)
        || rrc_common_PlmnInfo_tac_add(B, v1)
        || rrc_common_PlmnInfo_ranac_add(B, v2)) {
        return 0;
    }
    return rrc_common_PlmnInfo_end(B);
}

static rrc_common_PlmnInfo_ref_t rrc_common_PlmnInfo_clone(flatbuffers_builder_t *B, rrc_common_PlmnInfo_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (rrc_common_PlmnInfo_start(B)
        || rrc_common_PlmnInfo_cellId_pick(B, t)
        || rrc_common_PlmnInfo_plmn_pick(B, t)
        || rrc_common_PlmnInfo_tac_pick(B, t)
        || rrc_common_PlmnInfo_ranac_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, rrc_common_PlmnInfo_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* RRC_COMMON_BUILDER_H */
